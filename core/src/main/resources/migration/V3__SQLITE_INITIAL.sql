-- SQLite migration from H2
-- This migration creates the initial SQLite schema

-- Create sequences as tables (SQLite doesn't have sequences)
CREATE TABLE IF NOT EXISTS HIBERNATE_SEQUENCE (
    next_val INTEGER
);
INSERT INTO HIBERNATE_SEQUENCE (next_val) VALUES (50);

CREATE TABLE IF NOT EXISTS GENERIC_STORAGE_DATA (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    DATA TEXT,
    KEY VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS IDENTIFIER_KEY_VALUE_PAIR (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    IDENTIFIER_KEY VARCHAR(255),
    IDENTIFIER_VALUE VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS INDEXER (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NAME VARCHAR(255) UNIQUE,
    STATUS_ID INTEGER
);

CREATE TABLE IF NOT EXISTS INDEXERAPIACCESS (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    ACCESS_TYPE VARCHAR(255),
    ERROR VARCHAR(4000),
    RESPONSE_TIME BIGINT,
    RESULT VARCHAR(255),
    TIME TIMESTAMP,
    INDEXER_ID INTEGER,
    FOREIGN KEY (INDEXER_ID) REFERENCES INDEXER(ID) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS INDEXERAPIACCESS_TIME_INDEX ON INDEXERAPIACCESS (TIME DESC);
CREATE INDEX IF NOT EXISTS INDEXERAPIACC_INDID_TIME_INDEX ON INDEXERAPIACCESS (INDEXER_ID, TIME);
CREATE INDEX IF NOT EXISTS INDEXERAPIACC_TIME_INDEX ON INDEXERAPIACCESS (TIME);

CREATE TABLE IF NOT EXISTS INDEXERAPIACCESS_SHORT (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    INDEXER_ID INTEGER,
    TIME TIMESTAMP,
    SUCCESSFUL BOOLEAN,
    API_ACCESS_TYPE VARCHAR(255),
    FOREIGN KEY (INDEXER_ID) REFERENCES INDEXER(ID)
);

CREATE INDEX IF NOT EXISTS INDEXERAPIACCESS_SHORT_ACCESSTYPE_INDEXER_ID_TIME_INDEX ON INDEXERAPIACCESS_SHORT (INDEXER_ID ASC, API_ACCESS_TYPE ASC, TIME DESC);

CREATE TABLE IF NOT EXISTS INDEXERLIMIT (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    INDEXER_ID INTEGER,
    API_HITS INTEGER,
    API_HIT_LIMIT INTEGER,
    DOWNLOADS INTEGER,
    DOWNLOAD_LIMIT INTEGER,
    OLDEST_API_HIT TIMESTAMP,
    OLDEST_DOWNLOAD TIMESTAMP,
    FOREIGN KEY (INDEXER_ID) REFERENCES INDEXER(ID)
);

CREATE TABLE IF NOT EXISTS INDEXERUNIQUENESSSCORE (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    INDEXER_ID INTEGER NOT NULL,
    INVOLVED INTEGER NOT NULL,
    HAVE INTEGER NOT NULL,
    HASRESULT BOOLEAN NOT NULL,
    FOREIGN KEY (INDEXER_ID) REFERENCES INDEXER(ID)
);

CREATE TABLE IF NOT EXISTS MOVIEINFO (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    IMDB_ID VARCHAR(255),
    POSTER_URL VARCHAR(255),
    TITLE VARCHAR(255),
    TMDB_ID VARCHAR(255),
    YEAR INTEGER,
    UNIQUE (TMDB_ID, IMDB_ID)
);

CREATE TABLE IF NOT EXISTS NOTIFICATION (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    NOTIFICATION_EVENT_TYPE VARCHAR(255) NOT NULL,
    MESSAGE_TYPE VARCHAR(255) NOT NULL,
    TITLE VARCHAR(255),
    BODY VARCHAR(255) NOT NULL,
    URLS VARCHAR(255),
    TIME TIMESTAMP NOT NULL,
    DISPLAYED BOOLEAN DEFAULT 0 NOT NULL
);

CREATE TABLE IF NOT EXISTS PERSISTENT_LOGINS (
    SERIES VARCHAR(255) PRIMARY KEY,
    LAST_USED TIMESTAMP NOT NULL,
    TOKEN VARCHAR(255) NOT NULL,
    USERNAME VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS SEARCH (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    AUTHOR VARCHAR(255),
    CATEGORY_NAME VARCHAR(255),
    EPISODE VARCHAR(255),
    QUERY VARCHAR(1000),
    SEARCH_TYPE VARCHAR(255),
    SEASON INTEGER,
    SOURCE VARCHAR(255),
    TIME TIMESTAMP,
    TITLE VARCHAR(255),
    USER_AGENT VARCHAR(255),
    USERNAME VARCHAR(255),
    IP VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS INDEXERSEARCH (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    RESULTS_COUNT INTEGER,
    SUCCESSFUL BOOLEAN,
    INDEXER_ENTITY_ID INTEGER,
    SEARCH_ENTITY_ID INTEGER,
    FOREIGN KEY (SEARCH_ENTITY_ID) REFERENCES SEARCH(ID) ON DELETE CASCADE,
    FOREIGN KEY (INDEXER_ENTITY_ID) REFERENCES INDEXER(ID) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS INDEXERSEARCH_INDEXER_ENTITY_ID_SEARCH_ENTITY_ID_INDEX ON INDEXERSEARCH (INDEXER_ENTITY_ID, SEARCH_ENTITY_ID);
CREATE INDEX IF NOT EXISTS SEARCH_TIME_INDEX ON SEARCH (TIME DESC);
CREATE INDEX IF NOT EXISTS SEARCH_USER_HISTORY_INDEX1 ON SEARCH (USERNAME ASC, SOURCE ASC, TIME DESC);
CREATE INDEX IF NOT EXISTS SEARCH_USER_HISTORY_INDEX2 ON SEARCH (SOURCE ASC, TIME DESC);

CREATE TABLE IF NOT EXISTS SEARCHRESULT (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    DETAILS VARCHAR(4000),
    DOWNLOAD_TYPE VARCHAR(255),
    FIRST_FOUND TIMESTAMP,
    INDEXERGUID VARCHAR(4000) NOT NULL,
    LINK TEXT,
    PUB_DATE TIMESTAMP,
    TITLE VARCHAR(4000) NOT NULL,
    INDEXER_ID INTEGER NOT NULL,
    INDEXERSEARCHENTITY INTEGER,
    FOREIGN KEY (INDEXER_ID) REFERENCES INDEXER(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS INDEXERNZBDOWNLOAD (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    SEARCH_RESULT_ID INTEGER,
    STATUS VARCHAR(255),
    TIME TIMESTAMP,
    ERROR VARCHAR(4000),
    USERNAME VARCHAR(255),
    IP VARCHAR(255),
    USER_AGENT VARCHAR(255),
    AGE INTEGER,
    EXTERNAL_ID VARCHAR(255),
    NZB_ACCESS_TYPE VARCHAR(255),
    ACCESS_SOURCE VARCHAR(255),
    FOREIGN KEY (SEARCH_RESULT_ID) REFERENCES SEARCHRESULT(ID) ON DELETE CASCADE
);

CREATE INDEX IF NOT EXISTS INDEXERNZBDOWNLOAD_SEARCHRESULTID_INDEX ON INDEXERNZBDOWNLOAD (SEARCH_RESULT_ID);
CREATE INDEX IF NOT EXISTS INDEXERNZBDOWNLOAD_STATUS_INDEX ON INDEXERNZBDOWNLOAD (STATUS);
CREATE INDEX IF NOT EXISTS INDEXERNZBDOWNLOAD_TIME_INDEX ON INDEXERNZBDOWNLOAD (TIME);
CREATE INDEX IF NOT EXISTS NZB_DOWNLOAD_EXT_ID ON INDEXERNZBDOWNLOAD (EXTERNAL_ID);
CREATE INDEX IF NOT EXISTS UKFTFA80663URIMM78EPNXHYOM_INDEX_C ON INDEXERNZBDOWNLOAD (EXTERNAL_ID);

CREATE TABLE IF NOT EXISTS SEARCH_IDENTIFIERS (
    SEARCH_ID INTEGER NOT NULL,
    IDENTIFIERS_ID INTEGER NOT NULL,
    PRIMARY KEY (SEARCH_ID, IDENTIFIERS_ID),
    FOREIGN KEY (SEARCH_ID) REFERENCES SEARCH(ID) ON DELETE CASCADE,
    FOREIGN KEY (IDENTIFIERS_ID) REFERENCES IDENTIFIER_KEY_VALUE_PAIR(ID) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SHOWNNEWS (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    VERSION VARCHAR(255)
);

CREATE TABLE IF NOT EXISTS TVINFO (
    ID INTEGER PRIMARY KEY AUTOINCREMENT,
    TVDB_ID VARCHAR(255) UNIQUE,
    TVRAGE_ID VARCHAR(255) UNIQUE,
    TVMAZE_ID VARCHAR(255) UNIQUE,
    IMDB_ID VARCHAR(255) UNIQUE,
    TITLE VARCHAR(255),
    YEAR INTEGER,
    POSTER_URL VARCHAR(255)
);

CREATE UNIQUE INDEX IF NOT EXISTS UK_GFWLXF98S7J77CF7G6FSFVSS0_INDEX_9 ON TVINFO (TVDB_ID);
CREATE UNIQUE INDEX IF NOT EXISTS UK_NJKRL57AGU954UJKOTT65HWHH_INDEX_9 ON TVINFO (TVRAGE_ID);
CREATE UNIQUE INDEX IF NOT EXISTS UK_PGYJIFSNJSVJ1W9P0XVIDGP5E_INDEX_9 ON TVINFO (TVMAZE_ID); 